class Node{
    constructor(val, next=null){
        this.value = val;
        this.next = next;
    }
}

class SingleLinkedList{
    constructor(){
        this.head = null;
        this.tail=null;
        this.length= 0;
    }
    push(val){
        var newNode = new Node(val);
        if(this.head === null){
           this.head = newNode;
           this.tail = this.head;

        }else{
            
            this.tail.next  = newNode;
            this.tail = newNode;
           
        }
        this.length++;
        return this;
    }
    traverse(){
        let current =  this.head;
        while(current){
            console.log(current);
            current = current.next;
        }
    }
    pop(){
        let current = this.head;
        let length = this.length;
        while(current){
            if(length == this.length - 2){
                this.tail = current;
                current.next =  null;
            }
            length--;
            current = current.next;
        }
        this.length--;
    }
    shift(){
        this.head = this.head.next;
        this.pop();
    }
    unshift(val){
        this.head= new Node(val, this.head);
        this.length++;
    }
}
var list = new SingleLinkedList();
list.push(3);
list.push(6)
list.push(5)
list.push(4)
list.traverse();
list.pop();
list.traverse();
list.shift();
list.traverse();
list.unshift(123);
list.traverse();
